# 1. Определение количества различных подстрок с использованием хеш-функции. Пусть на вход функции дана строка.
# Требуется вернуть количество различных подстрок в этой строке.
# Примечания:
# * в сумму не включаем пустую строку и строку целиком;
# * без использования функций для вычисления хэша (hash(), sha1() или любой другой из модуля hashlib задача считается
# не решённой.

# решение такое:
# 1) s = генерируем список всех подстрок
# 2) в цикле ищем самый длинный элемент - это наша строка. Её убираем
# 3) res = генерируем список только уникальных хэшей (за счёт list(set()) дубли удаляются), тем самым мы гарантируем
# отсутствие хэш-коллизии и получаем количество действительно уникальных подстрок
import hashlib


def number_of_substrings(s):
    assert len(s) > 1, 'строка или пустая или в ней 1 элемент, что противоречит условию задания, так как хэш ' \
                            'строки из одного элемента - это = хэш строки целиком, а так нельзя, фу так делать'
    print(f'\nвот строка: {s} ')
    s = ([s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)])
    max_range = ''
    for i in s:
        if len(i) > len(max_range):
            max_range = i
    s.remove(max_range)
    print(f'список всех подстрок без учета самой строки:\n{str(s)[1:-1]}')
    res = list(set([hashlib.sha1(_.encode('utf-8')).hexdigest() for _ in s]))
    print(f'количество уникальных подстрок: {len(res)}\nхэши этих подстрок:')
    print(*res, sep='\n')


my_str = input('пиши свою строку: ')
number_of_substrings(my_str)
