# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на
# промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. Улучшенные версии
# сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

# создаём временную переменную step = False. Если во время итерации есть перестановки, то она = True. Как только она
# снова = False, значит перестановки больше не нужны и мы выходим из цикла. Скорость такой пузырьковой сортировки при
# идельном раскладе (если на старте всё само расстановлено, бывает же такое) может начинаться от O(n)
from random import randint

my_list = [randint(-100, 99) for i in range(20)]


def bubble_sort(array):
    n = 1
    while n < len(array):
        step = 0
        for i in range(len(array) - n):
            if array[i] < array[i + 1]:
                array[i], array[i + 1], step = array[i + 1], array[i], 1
        if step == 0:
            break
        n += 1
    return n - 1


print(f'Было:\n{my_list}\nА вот что у нас получилось:\nКоличество итераций: {bubble_sort(my_list)}\n{my_list}')
